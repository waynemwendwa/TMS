generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      UserRole
  passwordHash String?
  phone     String?
  poBox     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  inventoryLogs   InventoryLog[]
  createdProjects Project[]
  uploadedDocuments ProjectDocument[]
  createdBoqTemplates BoqTemplate[]
  createdOrderTemplates OrderTemplate[]
  supervisorAssignments SiteSupervisorAssignment[]

  @@map("users")
}

enum UserRole {
  SITE_SUPERVISOR
  PROCUREMENT
  SUPPLIER
  CHAIRMAN
  CHAIRMAN_PA
  FINANCE_PROCUREMENT
}

// Inventory Management
model Inventory {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String
  location    String?
  minStock    Int      @default(0)
  maxStock    Int?
  currentStock Int     @default(0)
  unit        String
  unitPrice   Decimal? @db.Decimal(15, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  logs        InventoryLog[]

  @@map("inventory")
}

model InventoryLog {
  id          String   @id @default(cuid())
  type        InventoryLogType
  quantity    Int
  previousStock Int
  newStock    Int
  remarks     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  userId      String
  user        User @relation(fields: [userId], references: [id])

  @@map("inventory_logs")
}

enum InventoryLogType {
  IN
  OUT
  ADJUSTMENT
  TRANSFER
}

// Office Documents Management
model OfficeDocument {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    DocumentCategory
  type        DocumentType
  size        Int
  url         String
  filePath    String
  uploadedBy  String
  uploadedAt  DateTime @default(now())
  tags        String[] @default([])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("office_documents")
}

enum DocumentCategory {
  CONTRACTS
  REPORTS
  POLICIES
  PROCEDURES
  TEMPLATES
  PROJECT_DOCUMENTS
  BOQ_DOCUMENTS
  OTHER
}

enum DocumentType {
  PDF
  DOC
  DOCX
  JPG
  JPEG
  PNG
}

// Project Management
model Project {
  id          String        @id @default(cuid())
  title       String
  description String?
  status      ProjectStatus @default(TO_START)
  startDate   DateTime?
  endDate     DateTime?
  estimatedDuration Int?    // in weeks
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  createdBy   String

  // Relations
  documents          ProjectDocument[]
  stakeholders       ProjectStakeholder[]
  procurementItems   ProcurementItem[]
  projectPhases      ProjectPhase[]
  boqTemplates       BoqTemplate[]
  orderTemplates     OrderTemplate[]
  supervisorAssignments SiteSupervisorAssignment[]
  createdByUser      User @relation(fields: [createdBy], references: [id])

  @@map("projects")
}

enum ProjectStatus {
  TO_START
  ONGOING
  COMPLETED
}

model ProjectDocument {
  id          String          @id @default(cuid())
  projectId   String
  name        String
  description String?
  category    ProjectDocumentCategory
  type        DocumentType
  size        Int
  url         String
  filePath    String
  uploadedBy  String
  uploadedAt  DateTime        @default(now())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  documentType String         // "preliminary" or "boq"

  // Relations
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  uploadedByUser User @relation(fields: [uploadedBy], references: [id])

  @@map("project_documents")
}

enum ProjectDocumentCategory {
  LETTER_OF_AWARD
  ACCEPTANCE_OF_AWARD
  PERFORMANCE_BOND
  CONTRACT_SIGNING
  BOQ_DOCUMENT
  SAMPLE_APPROVAL
  OTHER
}

model ProjectStakeholder {
  id          String      @id @default(cuid())
  projectId   String
  name        String
  email       String?
  phone       String?
  location    String?
  role        StakeholderRole
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_stakeholders")
}

enum StakeholderRole {
  MAIN_CONTRACTOR
  CLIENT
  CONSULTANT
  STRUCTURAL_ENGINEER
  ARCHITECT
  QUANTITY_SURVEYOR
  SUB_CONTRACTOR
  LAW_FIRM
}

model ProcurementItem {
  id          String   @id @default(cuid())
  projectId   String
  itemName    String
  description String?
  quantity    Int
  unit        String
  estimatedCost Decimal? @db.Decimal(15, 2)
  supplierId  String?
  actualCost  Decimal? @db.Decimal(15, 2)
  status      ProcurementStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("procurement_items")
}

enum ProcurementStatus {
  PENDING
  QUOTED
  APPROVED
  ORDERED
  DELIVERED
}

model ProjectPhase {
  id          String   @id @default(cuid())
  projectId   String
  phaseName   String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  status      PhaseStatus @default(PLANNED)
  weekNumber  Int
  tasks       String[] @default([])
  materials   String[] @default([])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_phases")
}

enum PhaseStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  DELAYED
}

// BOQ Template Management
model BoqTemplate {
  id          String   @id @default(cuid())
  projectId   String
  title       String   // Project title with phase
  equipmentInstallationWorks String // Materials needed to be installed
  billNumber  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String

  // Relations
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdByUser User @relation(fields: [createdBy], references: [id])
  items       BoqTemplateItem[]

  @@map("boq_templates")
}

model BoqTemplateItem {
  id          String   @id @default(cuid())
  boqTemplateId String
  item        String
  description String?
  quantity    Int
  unit        String
  rate        Decimal  @db.Decimal(15, 2)
  amount      Decimal  @db.Decimal(15, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  boqTemplate BoqTemplate @relation(fields: [boqTemplateId], references: [id], onDelete: Cascade)

  @@map("boq_template_items")
}

// Site Supervisor Assignment (limits supervisors to specific projects)
model SiteSupervisorAssignment {
  id        String   @id @default(cuid())
  userId    String
  projectId String
  createdAt DateTime @default(now())

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("site_supervisor_assignments")
}

// Order Template Management (for site supervisors)
model OrderTemplate {
  id          String   @id @default(cuid())
  projectId   String
  title       String
  description String?
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdByUser User  @relation(fields: [createdBy], references: [id])
  items       OrderTemplateItem[]

  @@map("order_templates")
}

model OrderTemplateItem {
  id              String   @id @default(cuid())
  orderTemplateId String
  item            String
  description     String?
  quantity        Int
  unit            String
  rate            Decimal  @db.Decimal(15, 2)
  amount          Decimal  @db.Decimal(15, 2)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  orderTemplate   OrderTemplate @relation(fields: [orderTemplateId], references: [id], onDelete: Cascade)

  @@map("order_template_items")
}
