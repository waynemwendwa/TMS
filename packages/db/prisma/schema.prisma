generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      UserRole
  passwordHash String?
  phone     String?
  poBox     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projectsCreated Project[] @relation("ProjectCreator")
  approvals       Approval[]
  orders          Order[]
  inventoryLogs   InventoryLog[]

  @@map("users")
}

enum UserRole {
  SITE_SUPERVISOR
  PROCUREMENT
  SUPPLIER
  CHAIRMAN
  CHAIRMAN_PA
}

// Project Management
model Project {
  id          String   @id @default(cuid())
  title       String   // Project title
  description String?
  status      ProjectStatus @default(PLANNING)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  createdByUser User @relation("ProjectCreator", fields: [createdBy], references: [id])

  // Enhanced project data
  mainContractor   String?  // Main contractor name
  client           String?  // Client name
  architect        String?  // Architect name
  engineer         String?  // Engineer name
  quantitySurveyor String?  // Quantity Surveyor name
  structuralEngineer String? // Structural Engineer name
  subcontractors   String?  // Subcontractors (comma-separated)
  lawFirm          String?  // Law firm name
  
  // Contact information for each party
  contractorContact   Json?  // {poBox, address, phone, location, email}
  clientContact       Json?  // {poBox, address, phone, location, email}
  architectContact    Json?  // {poBox, address, phone, location, email}
  engineerContact     Json?  // {poBox, address, phone, location, email}
  qsContact          Json?  // {poBox, address, phone, location, email}
  structuralContact  Json?  // {poBox, address, phone, location, email}
  subcontractorContact Json? // {poBox, address, phone, location, email}
  lawFirmContact     Json?  // {poBox, address, phone, location, email}

  // Relations
  parties     Party[]
  boqs        BOQ[]
  marketSurveys MarketSurvey[]
  suppliers   ProjectSupplier[]
  orders      Order[]
  inventory   Inventory[]
  sampleApprovals SampleApproval[]
  purchasingPlans PurchasingPlan[]
  procurementPlans ProcurementPlan[]

  @@map("projects")
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  COMPLETED
  ON_HOLD
}

// Party Management
model Party {
  id          String   @id @default(cuid())
  name        String
  type        PartyType
  email       String
  phone       String
  poBox       String?
  address     String?
  website     String?
  taxNumber   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projectId   String
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("parties")
}

enum PartyType {
  CONTRACTOR
  CLIENT
  ARCHITECT
  ENGINEER
  QA_SUPERVISOR
  SUB_CONTRACTOR
  STRUCTURAL_ENGINEER
}

// Bill of Quantities
model BOQ {
  id          String   @id @default(cuid())
  name        String
  version     String   @default("1.0")
  isPriced   Boolean  @default(false)
  totalAmount Decimal? @db.Decimal(15, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projectId   String
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // File uploads
  documentPath String? // Path to uploaded BOQ document
  documentType String? // 'image' or 'document'
  fileName     String? // Original filename

  // Relations
  items       BOQItem[]

  @@map("boqs")
}

model BOQItem {
  id          String   @id @default(cuid())
  itemCode    String
  description String
  unit        String
  quantity    Decimal  @db.Decimal(15, 3)
  unitPrice   Decimal? @db.Decimal(15, 2)
  totalPrice  Decimal? @db.Decimal(15, 2)
  remarks     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  boqId       String
  boq         BOQ @relation(fields: [boqId], references: [id], onDelete: Cascade)

  @@map("boq_items")
}

// Market Survey
model MarketSurvey {
  id          String   @id @default(cuid())
  name        String
  description String?
  surveyDate  DateTime
  status      MarketSurveyStatus @default(DRAFT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projectId   String
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // Relations
  items       MarketSurveyItem[]

  @@map("market_surveys")
}

enum MarketSurveyStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
  APPROVED
}

model MarketSurveyItem {
  id            String   @id @default(cuid())
  itemCode      String
  description   String
  specification String?
  unit          String
  quantity      Decimal  @db.Decimal(15, 3)
  marketPrice   Decimal  @db.Decimal(15, 2)
  tenderedPrice Decimal? @db.Decimal(15, 2)
  supplierId    String?
  supplier      Supplier? @relation(fields: [supplierId], references: [id])
  remarks       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  marketSurveyId String
  marketSurvey   MarketSurvey @relation(fields: [marketSurveyId], references: [id], onDelete: Cascade)

  @@map("market_survey_items")
}

// Supplier Management
model Supplier {
  id          String   @id @default(cuid())
  name        String
  email       String
  phone       String
  poBox       String?
  address     String?
  website     String?
  taxNumber   String?
  rating      Int?     @default(3)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  marketSurveyItems MarketSurveyItem[]
  projectSuppliers   ProjectSupplier[]
  quotes             Quote[]
  deliveries         Delivery[]
  sampleApprovals    SampleApproval[]
  procurementItems   ProcurementItem[]

  @@map("suppliers")
}

model ProjectSupplier {
  id          String   @id @default(cuid())
  isRecommended Boolean @default(false)
  remarks     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projectId   String
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  supplierId  String
  supplier    Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@unique([projectId, supplierId])
  @@map("project_suppliers")
}

// Sample Approval Workflow
model SampleApproval {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      ApprovalStatus @default(PENDING)
  submittedAt DateTime @default(now())
  approvedAt  DateTime?
  rejectedAt  DateTime?
  remarks     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  supplierId  String
  supplier    Supplier @relation(fields: [supplierId], references: [id])
  projectId   String
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  procurementPlanId String?
  procurementPlan ProcurementPlan? @relation(fields: [procurementPlanId], references: [id], onDelete: Cascade)

  // Relations
  approvals   Approval[]

  @@map("sample_approvals")
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
}

model Approval {
  id          String   @id @default(cuid())
  status      ApprovalStatus
  remarks     String?
  approvedAt  DateTime @default(now())
  approverId  String
  approver    User @relation(fields: [approverId], references: [id])
  sampleApprovalId String
  sampleApproval SampleApproval @relation(fields: [sampleApprovalId], references: [id], onDelete: Cascade)

  @@map("approvals")
}

// Procurement Plan
model ProcurementPlan {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      ProcurementPlanStatus @default(DRAFT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projectId   String
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // Relations
  items       ProcurementItem[]
  sampleApprovals SampleApproval[]

  @@map("procurement_plans")
}

model ProcurementItem {
  id          String   @id @default(cuid())
  itemCode    String
  description String
  specification String?
  unit        String
  quantity    Decimal  @db.Decimal(15, 3)
  marketPrice Decimal  @db.Decimal(15, 2)
  tenderedPrice Decimal? @db.Decimal(15, 2)
  supplierId  String?
  supplier    Supplier? @relation(fields: [supplierId], references: [id])
  remarks     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  procurementPlanId String
  procurementPlan ProcurementPlan @relation(fields: [procurementPlanId], references: [id], onDelete: Cascade)

  @@map("procurement_items")
}

enum ProcurementPlanStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
  APPROVED
}

// Purchasing Plan
model PurchasingPlan {
  id          String   @id @default(cuid())
  name        String
  description String?
  bankDetails String?
  creditorInfo String?
  totalAmount Decimal  @db.Decimal(15, 2)
  status      PurchasingPlanStatus @default(DRAFT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projectId   String
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("purchasing_plans")
}

enum PurchasingPlanStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  IN_PROGRESS
  COMPLETED
}

// Inventory Management
model Inventory {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String
  location    String?
  minStock    Int      @default(0)
  maxStock    Int?
  currentStock Int     @default(0)
  unit        String
  unitPrice   Decimal? @db.Decimal(15, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projectId   String
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // Relations
  logs        InventoryLog[]
  orders      Order[]

  @@map("inventory")
}

model InventoryLog {
  id          String   @id @default(cuid())
  type        InventoryLogType
  quantity    Int
  previousStock Int
  newStock    Int
  remarks     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  userId      String
  user        User @relation(fields: [userId], references: [id])

  @@map("inventory_logs")
}

enum InventoryLogType {
  IN
  OUT
  ADJUSTMENT
  TRANSFER
}

// Order Management
model Order {
  id          String   @id @default(cuid())
  orderNumber String   @unique
  title       String
  description String?
  status      OrderStatus @default(PENDING)
  orderDate   DateTime @default(now())
  requiredDate DateTime?
  totalAmount Decimal? @db.Decimal(15, 2)
  remarks     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projectId   String
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  requestedById String
  requestedBy User @relation(fields: [requestedById], references: [id])
  inventoryId String?
  inventory   Inventory? @relation(fields: [inventoryId], references: [id])

  // Relations
  items       OrderItem[]
  deliveries  Delivery[]

  @@map("orders")
}

enum OrderStatus {
  PENDING
  APPROVED
  REJECTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model OrderItem {
  id          String   @id @default(cuid())
  itemCode    String
  description String
  unit        String
  quantity    Int
  unitPrice   Decimal? @db.Decimal(15, 2)
  totalPrice  Decimal? @db.Decimal(15, 2)
  remarks     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orderId     String
  order       Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

// Delivery Management
model Delivery {
  id          String   @id @default(cuid())
  deliveryNumber String @unique
  deliveryDate DateTime @default(now())
  status      DeliveryStatus @default(PENDING)
  receivedAt  DateTime?
  remarks     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orderId     String
  order       Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  supplierId  String
  supplier    Supplier @relation(fields: [supplierId], references: [id])

  // Relations
  documents   DeliveryDocument[]

  @@map("deliveries")
}

enum DeliveryStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
  RECEIVED
  VERIFIED
}

model DeliveryDocument {
  id          String   @id @default(cuid())
  fileName    String
  filePath    String
  fileSize    Int
  mimeType    String
  isStamped   Boolean  @default(false)
  uploadedAt  DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deliveryId  String
  delivery    Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)

  @@map("delivery_documents")
}

// Tools and Equipment
model Tool {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String
  serialNumber String?
  condition   ToolCondition @default(GOOD)
  location    String?
  assignedTo  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  usageLogs   ToolUsageLog[]

  @@map("tools")
}

enum ToolCondition {
  EXCELLENT
  GOOD
  FAIR
  POOR
  OUT_OF_SERVICE
}

model ToolUsageLog {
  id          String   @id @default(cuid())
  startTime   DateTime
  endTime     DateTime?
  purpose     String
  remarks     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  toolId      String
  tool        Tool @relation(fields: [toolId], references: [id], onDelete: Cascade)

  @@map("tool_usage_logs")
}

// Quote Management
model Quote {
  id          String   @id @default(cuid())
  quoteNumber String   @unique
  title       String
  description String?
  totalAmount Decimal  @db.Decimal(15, 2)
  validUntil  DateTime
  status      QuoteStatus @default(DRAFT)
  submittedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  supplierId  String
  supplier    Supplier @relation(fields: [supplierId], references: [id])

  // Relations
  items       QuoteItem[]

  @@map("quotes")
}

enum QuoteStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  ACCEPTED
  REJECTED
  EXPIRED
}

model QuoteItem {
  id          String   @id @default(cuid())
  itemCode    String
  description String
  unit        String
  quantity    Int
  unitPrice   Decimal  @db.Decimal(15, 2)
  totalPrice  Decimal  @db.Decimal(15, 2)
  remarks     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  quoteId     String
  quote       Quote @relation(fields: [quoteId], references: [id], onDelete: Cascade)

  @@map("quote_items")
}
